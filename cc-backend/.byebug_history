exit
continue
list_name = params[:list_name]
movie_id = params[:movie_id].to_i
params[:movie_id]
params
continue
movie_params
exit
continue
user.movie_lists
user.movie_lists.count
user.movie_lists
movie_list.movies.exists?(tmdb_id: movie_id)
movie_list
movie_list = user.movie_lists.find_by(name: list_name)
movie_list = user.movie_lists.find_or_create_by(name: list_name)
list_name = params[:list_name]
movie_id = params[:movie_id].to_i
user = current_user
moo
continue
exit
moo
continue
is_favorite = favorites_list.present? && favorites_list.movies.exists?(tmdb_id: movie_id)
favorites_list = user.movie_lists.find_by(name: 'Favorites')
user = current_user
user
movie_id
movie_id = params[:id].to_i
movie_id
user = current_user # Assuming you have a method to get the current user
   31:       movie_id = params[:id].to_i
continue
favorites_list.movies.exists?(507089)
favorites_list.movies.exists?(1)
favorites_list.movies.exists(id:1)
favorites_list.movies.exists(1)
favorites_list.movies.exists(507089)
favorites_list.movies
favorites_list
favorites_list = user.movie_lists.find_by(name: 'Favorites')
movie_id
movie_id = params[:id].to_i
user
user = current_user 
continue
exit
if movie.save
    7:           render json: { message: 'Movie created successfully', movie: movie }
    8:         else
    9:           render json: { error: movie.errors.full_messages.join(', ') }, status: :unprocessable_entity
   10:         end
movie.save
movie
movie = Movie.new(movie_params)
exit
movie.save
movie
movie.save
movie
movie = Movie.new(movie_params)
exit
movie.save
movie
movie = Movie.find_or_create_by(tmdb_id: movie_params[:tmdb_id]) do |new_movie|
      new_movie.assign_attributes(movie_params)
    end
movie
movie = Movie.find_or_create_by(tmdb_id: movie_params[:tmdb_id]) do |new_movie|
    5:       new_movie.assign_attributes(movie_params)
    6:     end
exit
movie.save
movie.persisted?
movie
new_movie
movie
movie = Movie.find_or_create_by(tmdb_id: movie_params[:tmdb_id]) do |new_movie|
      new_movie.assign_attributes(movie_params)
    end
end
new_movie.assign_attributes(movie_params)
movie = Movie.find_or_create_by(tmdb_id: movie_params[:tmdb_id]) do |new_movie|
movie
continue
@movie.save
@movie
@movie = Movie.new(movie_params)
Movie.all
movies.all
movie.all
movie.save
movie
movie = Movie.new(movie_params)
movie_params
moo
continue
@movie_list.movies.include?(movie)
@movie_list.movies
movie
movie = Movie.find(params[:movie_id])
exit
@movie_list.movies.include?(movie)
@movie_list.movies
@movie_list
movie
movie = Movie.find(params[:movie_id])
exit
@movie_list.movies.include?(movie)
@movie_list.movies.include?(movie
movie
movie = Movie.find(params[:movie_id])
exit
rails db:schema:dump
like = review.likes.build(user: current_user)
current_user
review
review = Review.find(params[:id])
continue
review = Review.new(review_params.merge(user_id: current_user.id, movie_id: movie.id))
movie = Movie.find_by(tmdb_id: tmdb_id)
movie
movie = Movie.find_by(tmdb_id: tmdb_id)
tmdb_id
tmdb_id = params[:review][:tmdb_id]
params[:review][:tmdb_id]
params[:review]
params
continue
movie = Movie.find_by(tmdb_id: params[:id])
params
continue
params
continue
params
continue
params
continue
params
movie = Movie.find_by(tmdb_id: params[:tmdb_id])
params
continue
params
continue
if movie.nil?
      render json: { error: "Movie with TMDB ID #{tmdb_id} not found" }, status: :not_found
      return
    end
movie
movie = Movie.find_by(tmdb_id: tmdb_id)
tmdb_id = params[:review][:tmdb_id]
continue
movie = Movie.find_by(tmdb_id: tmdb_id)
tmdb_id = params[:review][:tmdb_id]
tmdb_id
review
if review.save
      render json: { message: 'Review created successfully', review: review }
    else
      render json: { error: review.errors.full_messages.join(', ') }, status: :unprocessable_entity
    end
review = Review.new(review_params.merge(user_id: current_user.id, movie_id: movie.id))
movie = Movie.find_by(tmdb_id: tmdb_id)
tmdb_id = params[:review][:tmdb_id]
continue
review = Review.new(review_params.merge(user_id: current_user.id, movie_id: movie.id))
if movie.nil?
      render json: { error: "Movie with TMDB ID #{tmdb_id} not found" }, status: :not_found
      return
    end
movie
movie = Movie.find_by(tmdb_id: tmdb_id)
tmdb_id = params[:review][:tmdb_id]
continue
review = Review.new(review_params.merge(user_id: current_user.id))
continue
review = Review.new(review_params.merge(user_id: current_user.id))
continue
review = Review.new(review_params.merge(user_id: current_user.id))
continue
review = Review.new(review_params.merge(user_id: current_user.id))
current_user.id
current_user
continue
session[:user_id]
session
reset_session
session.clear
session[:user_id]
session
continue
session[:count]
session
session.clear
session.delete
session[:user_id]
session[:count]
session
continue
session[:user_id]
session
continue
session[:user_id]
session[:count]
session
continue
params
session
continue
session[:session_id]
session.inspect
session
session[:user_id]
session[:count]
session
continue
session[:count]
continue
session[:user_id]
session
continue
session[:count]
session[:count] += 11
session[:count]
session[:user_id]
continue
session[:user_id]
exit
session[:user_id]
exit
session[:user_id]
session
